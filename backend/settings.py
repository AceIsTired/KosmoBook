"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.6.
Docs:
- https://docs.djangoproject.com/en/5.2/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env for local dev
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# =====================================================================
# Core Django settings
# =====================================================================

# SECURITY WARNING: keep the secret key used in production secret!
# (Rotate this and move to environment variable for production.)
SECRET_KEY = 'django-insecure-oyz+ysifu2-r^ma%s+#(n)4jfi!ey#j_fopv+(h^@338&#$u^2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

# Application definition
INSTALLED_APPS = [
    # Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party
    'rest_framework',
    'corsheaders',  # only needed if your frontend is on a different origin

    # Local apps
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    # Enable CORS before CommonMiddleware if using cross-origin requests
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database (SQLite for dev; swap in Postgres for prod)
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Chicago'
USE_I18N = True
USE_TZ = True

# Static files
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =====================================================================
# Django REST Framework
# =====================================================================
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # Custom auth class that verifies Supabase JWTs via JWKS
        "api.authentication.SupabaseJWTAuthentication",
    ],
    # You can add DEFAULT_PERMISSION_CLASSES if you want global IsAuthenticated, etc.
    # "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.AllowAny"]
}

# =====================================================================
# Supabase configuration (from environment)
# =====================================================================
SUPABASE_URL = os.getenv("SUPABASE_URL", "")
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY", "")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY", "")
SUPABASE_JWT_AUD = os.getenv("SUPABASE_JWT_AUD", "authenticated")

# Optional: cookie domain if setting HttpOnly cookies in views
COOKIE_DOMAIN = os.getenv("COOKIE_DOMAIN", "") or None  # leave None for localhost

# =====================================================================
# CORS / CSRF (needed if frontend is on a different origin)
# =====================================================================
# Lock these down to your real frontend origin(s) in production.
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    # e.g., "https://app.example.com",
    # e.g., "http://localhost:3000",
]

# For dev, if you truly need a wildcard, uncomment the next two lines (not recommended for prod):
# CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOWED_ORIGIN_REGEXES = [r"^https?://localhost:\d+$"]

# If youâ€™re using HttpOnly cookies for auth from a separate origin:
CSRF_TRUSTED_ORIGINS = [
    # e.g., "https://app.example.com",
    # e.g., "http://localhost:3000",
]

# =====================================================================
# Security & HTTPS (tighten in production)
# =====================================================================
# If behind a reverse proxy that sets X-Forwarded-Proto
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Redirect to HTTPS in production
SECURE_SSL_REDIRECT = not DEBUG

# Cookies secure flags (True in prod)
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# SameSite for cookies (works well for SPA/API; adjust if needed)
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"
